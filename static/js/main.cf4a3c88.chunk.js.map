{"version":3,"sources":["components/info.js","components/form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","sunrise_date","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","sys","Date","toISOString","substr","_this","setState","main","stop","info","components_form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRASeA,EAPF,kBACTC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,0KCIOC,EAPF,SAAAC,GAAK,OACdJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,eAClBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3CT,EAAAC,EAAAC,cAAA,yGCWOQ,EAdC,SAAAN,GAAK,OACjBJ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACVP,EAAMQ,MACPZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kGAAoBE,EAAMQ,KAA1B,KAAkCR,EAAMS,SACxCb,EAAAC,EAAAC,cAAA,gFAAiBE,EAAMU,MACvBd,EAAAC,EAAAC,cAAA,uFAAmBE,EAAMW,SACzBf,EAAAC,EAAAC,cAAA,iFAAkBE,EAAMY,SAG5BhB,EAAAC,EAAAC,cAAA,KAAGS,UAAU,SAASP,EAAMa,SCP9BC,EAAU,mCA4EDC,6MAxEXC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,aAASM,EACTL,YAAQK,EACRJ,WAAOI,KAGXC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAZ,EAAAa,EAAAC,EAAAV,EAAAD,EAAAY,EAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbT,EAAEU,mBACItB,EAAOY,EAAEW,OAAOC,SAASxB,KAAKyB,OAFvB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKaK,MAAK,qDAAAC,OAAsD3B,EAAtD,WAAA2B,OAAoErB,EAApE,kBALlB,cAKHO,EALGM,EAAAS,KAAAT,EAAAE,KAAA,EAMUR,EAAQgB,OANlB,OAMHf,EANGK,EAAAS,KAOTE,QAAQC,IAAIjB,GAGRV,EAASU,EAAKkB,IAAI5B,OAClBD,EAAUW,EAAKkB,IAAI7B,QACnBY,EAAe,IAAIkB,KAAe,IAAV9B,GAAgB+B,cAAcC,OAAO,GAAI,GACjEnB,EAAc,IAAIiB,KAAc,IAAT7B,GAAe8B,cAAcC,OAAO,GAAI,GAEnEC,EAAKC,SAAS,CACVnC,KAAMY,EAAKwB,KAAKpC,KAChBF,KAAMc,EAAKlB,KACXK,QAASa,EAAKkB,IAAI/B,QAClBE,QAASY,EACTX,OAAQY,EACRX,WAAOI,IArBFU,EAAAE,KAAA,iBAwBTe,EAAKC,SAAS,CACVnC,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,aAASM,EACTL,YAAQK,EACRJ,MAAO,+HA9BF,yBAAAc,EAAAoB,SAAA5B,oIAoCb,OACIvB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBACXX,EAAAC,EAAAC,cAACkD,EAAD,OAEJpD,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBACXX,EAAAC,EAAAC,cAACmD,EAAD,CAAM/C,cAAegD,KAAKhC,iBAC1BtB,EAAAC,EAAAC,cAACqD,EAAD,CACIzC,KAAMwC,KAAKlC,MAAMN,KACjBF,KAAM0C,KAAKlC,MAAMR,KACjBC,QAASyC,KAAKlC,MAAMP,QACpBE,QAASuC,KAAKlC,MAAML,QACpBC,OAAQsC,KAAKlC,MAAMJ,OACnBC,MAAOqC,KAAKlC,MAAMH,oBA/DpCuC,IAAMC,uBCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf4a3c88.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>weather</h2>\r\n        <p>узнайте погоду в вашем городе!</p>\r\n    </div>\r\n);\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Получить погоду</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"infoWeath\">\r\n        {props.city &&\r\n        <div>\r\n            <p>Местоположение: {props.city}, {props.country}</p>\r\n            <p>Температура: {props.temp}</p>\r\n            <p>Восход солнца: {props.sunrise}</p>\r\n            <p>Заход солнца: {props.sunset}</p>\r\n        </div>\r\n        }\r\n        <p className=\"error\">{props.error}</p>\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_KEY = \"a701373c514912374872f7a940df00a7\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        error: undefined\r\n    };\r\n\r\n    gettingWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n\r\n        if (city) {\r\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n            const data = await api_url.json();\r\n            console.log(data);\r\n\r\n\r\n            let sunset = data.sys.sunset;\r\n            let sunrise = data.sys.sunrise;\r\n            let sunrise_date = new Date(sunrise * 1000).toISOString().substr(11, 8);\r\n            let sunset_date = new Date(sunset * 1000).toISOString().substr(11, 8);\r\n\r\n            this.setState({\r\n                temp: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                sunrise: sunrise_date,\r\n                sunset: sunset_date,\r\n                error: undefined\r\n            });\r\n        } else {\r\n            this.setState({\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                sunrise: undefined,\r\n                sunset: undefined,\r\n                error: \"ведите название города\"\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-5 info\">\r\n                                <Info/>\r\n                            </div>\r\n                            <div className=\"col-sm-7 form\">\r\n                                <Form weatherMethod={this.gettingWeather}/>\r\n                                <Weather\r\n                                    temp={this.state.temp}\r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    sunrise={this.state.sunrise}\r\n                                    sunset={this.state.sunset}\r\n                                    error={this.state.error}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}